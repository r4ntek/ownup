import asyncio
import json
import os
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import CommandStart, Command
from aiogram.types import (
    Message,
    InlineKeyboardMarkup,
    InlineKeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from matplotlib.pylab import set_state
from config import TOKEN

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê ---
bot = Bot(token=TOKEN)
dp = Dispatcher()

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
ADMIN_IDS = [(5247307710), (1318179688)]
DATA_FILE = 'storage.json'

# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class Onboarding(StatesGroup):
    goal = State()
    reminder = State()

class DailyCheckin(StatesGroup):
    mood = State()
    concerns = State()

class ValuesTest(StatesGroup):
    question = State()

class Broadcast(StatesGroup):
    message = State()

class Cleanup(StatesGroup):
    user_id = State()

# --- –ö–†–ò–ó–ò–°–ù–´–ï –†–ï–°–£–†–°–´ ---
CRISIS_KEYWORDS = [
    '—Å—É–∏—Ü–∏–¥', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç–æ—Å–∫–∞', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ', 
    '–ø–∞–Ω–∏–∫–∞', '—Å—Ç—Ä–∞—Ö', '–±–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å', '–æ—Ç—á–∞—è–Ω–∏–µ', '–ø–æ–º–æ–≥–∏', '–Ω–µ —Ö–æ—á—É –∂–∏—Ç—å', 
    '–∫—Ä–∏–∑–∏—Å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '–≥–æ—Ä–µ', '–ø–µ—á–∞–ª—å', '—Ç—Ä–µ–≤–æ–≥–∞', '–±–æ–ª—å', 
    '–ø–æ—Ç–µ—Ä—è', '—Ä–∞–∑–≤–æ–¥', '–∫–æ–Ω–µ—Ü —Å–≤–µ—Ç–∞', '–±–µ–∑—ã—Å—Ö–æ–¥–Ω–æ—Å—Ç—å', '—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ –º—ã—Å–ª–∏',
    '–∂–∏—Ç—å –Ω–µ —Ö–æ—á—É', '—Å–∏–ª—å–Ω–∞—è –≥—Ä—É—Å—Ç—å', '–±–µ–∑–Ω–∞–¥–µ–≥–∞', '–æ—Ç—á–∞—è–Ω–∏–µ',
    '–ø–æ–º–æ–≥–∏—Ç–µ –º–Ω–µ', '—è –Ω–µ —Å–ø—Ä–∞–≤–ª—è—é—Å—å', '–º–Ω–µ –ø–ª–æ—Ö–æ'
]
CRISIS_RESOURCES = {
    'lines': [
        '+7 800 7000 600 (–†–æ—Å—Å–∏—è, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)',
        '+1-800-273-8255 (–°–®–ê, –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ)'
    ],
    'therapists': [
        'https://www.7cups.com',
        'https://betterhelp.com'
    ],
    'articles': [
        'https://www.who.int/ru/news-room/fact-sheets/detail/mental-health',
        'https://www.psychologytoday.com'
    ]
}

# --- –£–¢–ò–õ–ò–¢–´ ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    except:
        return {}

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def ensure_user(uid: int):
    data = load_data()
    if str(uid) not in data:
        data[str(uid)] = {
            'goal': None, 'reminder': None,
            'last_checkin': None, 'mood_history': [],
            'values_answers': []
        }
        save_data(data)
    return data

# --- –ö–û–ù–¢–ï–ù–¢ ---
BREATHING = [
    "4-7-8 –¥—ã—Ö–∞–Ω–∏–µ: –≤–¥–æ—Ö 4—Å, –∑–∞–¥–µ—Ä–∂–∫–∞ 7—Å, –≤—ã–¥–æ—Ö 8—Å √ó5 —Ü–∏–∫–ª–æ–≤.",
    "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ: –≤–¥–æ—Ö-4—Å, –∑–∞–¥–µ—Ä–∂–∫–∞-4—Å, –≤—ã–¥–æ—Ö-4—Å, –ø–∞—É–∑–∞-4—Å √ó4."
]
MEDITATIONS = [
    "3-–º–∏–Ω—É—Ç–Ω–∞—è –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ—Å—Ç—å: –Ω–∞–±–ª—é–¥–∞–π—Ç–µ –∑–∞ –¥—ã—Ö–∞–Ω–∏–µ–º.",
    "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å: –≤—Å–ø–æ–º–∏–Ω–∞–π—Ç–µ 3 –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã."
]
AFFIRMATIONS = [
    "–Ø –¥–æ—Å—Ç–æ–∏–Ω –ª—é–±–≤–∏ –∏ –∑–∞–±–æ—Ç—ã.",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Ä–∞—Å—Ç—É –∏ —Ä–∞–∑–≤–∏–≤–∞—é—Å—å.",
    "–ú–æ–∏ –º—ã—Å–ª–∏ –ø–æ–¥ –º–æ–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º.",
    "–Ø –ø—Ä–∏–Ω–∏–º–∞—é —Å–µ–±—è —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π —è –µ—Å—Ç—å."
]
RESOURCES = {
    'music': ['https://vk.com/music/album/-2000054706_21054706_c1090c02460faa9780', 'https://vk.com/music/album/-2000967097_23967097_fe5eeaccdb29c1ba4c'],
    'podcasts': ['https://podcasts.apple.com/podcast/id123456', 'https://vk.com/audio_playlist/-1_987654321'],
    'prompts': [
        '–û–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ —Ö–æ—Ä–æ—à–∏–µ –≤–µ—â–∏, —Å–ª—É—á–∏–≤—à–∏–µ—Å—è —Å–µ–≥–æ–¥–Ω—è.',
        '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ —É–ª—É—á—à–∏—Ç—å –≤ —Å–µ–±–µ?',
        '–ö–∞–∫–∏–µ –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤—ã —Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?'
    ]
}
ETHICS = {
    '–£—Ç–∏–ª–∏—Ç–∞—Ä–∏–∑–º': '–î–µ–π—Å—Ç–≤–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –µ—Å–ª–∏ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –±–ª–∞–≥–æ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤—É.',
    '–î–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—è': '–°–ª–µ–¥—É–π—Ç–µ –º–æ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.',
    '–≠—Ç–∏–∫–∞ –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª–µ–π': '–§–æ–∫—É—Å –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω—ã—Ö —á–µ—Ä—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞.'
}
VALUES_Q = [
    '–ß—Ç–æ –¥–ª—è –≤–∞—Å —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∏–±–æ–ª—å—à–µ–π —Ü–µ–Ω–Ω–æ—Å—Ç—å—é –≤ –∂–∏–∑–Ω–∏?',
    '–ö–∞–∫–∏–º –≤—ã –≤–∏–¥–∏—Ç–µ —Å–≤–æ—ë –∏–¥–µ–∞–ª—å–Ω–æ–µ –∑–∞–≤—Ç—Ä–∞?',
    '–ö–∞–∫–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —Å–≤–æ–∏–º –≥–ª–∞–≤–Ω—ã–º?'
]
STAR = (
    'üß© *STAR-–º–µ—Ç–æ–¥*:\n'
    '*S*ituation ‚Äî –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.\n'
    '*T*ask ‚Äî —Å—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á—É.\n'
    '*A*ction ‚Äî –∫–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –≤–æ–∑–º–æ–∂–Ω—ã?\n'
    '*R*esult ‚Äî –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã. '
)

# --- –î–ò–ó–ê–ô–ù: Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu(is_admin=False):
    buttons = [
        [
            InlineKeyboardButton(text='‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support'),
            InlineKeyboardButton(text='‚öñÔ∏è –≠—Ç–∏–∫–∞', callback_data='ethics')
        ],
        [
            InlineKeyboardButton(text='üß† –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è', callback_data='reflect'),
            InlineKeyboardButton(text='‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è', callback_data='emergency')
        ],
        [InlineKeyboardButton(text='üìä –¢—Ä–µ–Ω–¥—ã', callback_data='trends')],
        [InlineKeyboardButton(text='üìù –ß–µ–∫-–∏–Ω', callback_data='checkin')]
    ]
    if is_admin:
        buttons.append([InlineKeyboardButton(text='üîß Admin', callback_data='admin')])
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)

support_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='üå¨Ô∏è –î—ã—Ö–∞–Ω–∏–µ', callback_data='breath'),
            InlineKeyboardButton(text='üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è', callback_data='meditate')
        ],
        [
            InlineKeyboardButton(text='‚ú® –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏', callback_data='affirm'),
            InlineKeyboardButton(text='üìö –†–µ—Å—É—Ä—Å—ã', callback_data='resources')
        ],
        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')]
])

ethics_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text='üß© STAR', callback_data='star'),
            InlineKeyboardButton(text='üìò –¢–µ–æ—Ä–∏–∏', callback_data='theories')
        ],
        [
            InlineKeyboardButton(text='üí° –¶–µ–Ω–Ω–æ—Å—Ç–∏', callback_data='values'),
            InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')
        ]
    ]
)

crisis_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ì–æ—Ä—è—á–∏–µ –ª–∏–Ω–∏–∏', callback_data='cr_lines')],
        [InlineKeyboardButton(text='–û–Ω–ª–∞–π–Ω-—Ç–µ—Ä–∞–ø–µ–≤—Ç—ã', callback_data='cr_therapists')],
        [InlineKeyboardButton(text='–°—Ç–∞—Ç—å–∏', callback_data='cr_articles')],
        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ]
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@dp.message(CommandStart())
async def on_start(msg: Message, state: FSMContext):
    ensure_user(msg.from_user.id)
    is_admin = msg.from_user.id in ADMIN_IDS
    welcome_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* \n\n"
        "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —á–µ–∫-–∏–Ω–æ–≤, —Ç–µ—Å—Ç–æ–≤ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "–í–æ—Ç —á—Ç–æ —è –º–æ–≥—É –¥–ª—è –≤–∞—Å —Å–¥–µ–ª–∞—Ç—å:\n"
        "üîπ –ü—Ä–æ–≤–µ—Å—Ç–∏ —á–µ–∫-–∏–Ω –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.\n"
        "üîπ –ü–æ–º–æ—á—å –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç—ã —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.\n"
        "üîπ –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã.\n"
        "üîπ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏.\n\n"
        "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
        "1. –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/help ‚Äî –ø–æ–ª—É—á–∏—Ç—å –ø–æ–º–æ—â—å\n"
        "/menu ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –ø–∏—à–∏—Ç–µ –º–Ω–µ!"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    msg_obj = await msg.answer(welcome_text, parse_mode='Markdown', reply_markup=main_menu(is_admin))
    await state.set_data({'main_msg_id': msg_obj.message_id})

@dp.callback_query(F.data == 'support')
async def cb_support(cq: types.CallbackQuery):
    await cq.message.edit_text('üõ†Ô∏è *–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*', parse_mode='Markdown', reply_markup=support_kb)

@dp.callback_query(F.data == 'ethics')
async def cb_ethics(cq: types.CallbackQuery):
    await cq.message.edit_text('‚öñÔ∏è *–≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã:*', parse_mode='Markdown', reply_markup=ethics_kb)

@dp.callback_query(F.data == 'reflect')
async def cb_reflect(cq: types.CallbackQuery):
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await cq.message.edit_text('üß† *–°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è*\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ß–µ–∫-–∏–Ω.', parse_mode='Markdown', reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'trends')
async def cb_trends(cq: types.CallbackQuery):
    data = load_data().get(str(cq.from_user.id), {}).get('mood_history', [])
    if not data:
        text = 'üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: 0/10'
    else:
        avg_mood = sum(int(h["mood"]) for h in data[-7:]) / len(data[-7:])
        text = f'üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: {avg_mood:.1f}/10'
    await cq.message.edit_text(text, reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'emergency')
async def cb_emergency(cq: types.CallbackQuery):
    await cq.message.edit_text('‚ö†Ô∏è *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å*', parse_mode='Markdown', reply_markup=crisis_kb)

@dp.callback_query(F.data.startswith('cr_'))
async def cb_crisis(cq: types.CallbackQuery):
    key = cq.data.split('_',1)[1]
    items = CRISIS_RESOURCES.get(key, [])
    text = f'*{key.title().replace("_", " ")}:*\n' + '\n'.join(f'- {i}' for i in items)
    await cq.message.edit_text(text, parse_mode='Markdown', reply_markup=crisis_kb)

@dp.callback_query(F.data == 'back')
async def cb_back(cq: types.CallbackQuery):
    await cq.message.edit_text('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown', reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'checkin')
async def cb_checkin(cq: types.CallbackQuery, state: FSMContext):
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ
    await cq.message.delete()
    msg_obj = await cq.message.answer('üìÖ –û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è (1‚Äì10):')
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º message_id –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    await state.set_data({'main_msg_id': msg_obj.message_id})
    await state.set_state(DailyCheckin.mood)

@dp.message(DailyCheckin.mood, F.text)
async def ai_mood(msg: Message, state: FSMContext):
    try:
        m = int(msg.text)
        assert 1 <= m <= 10
    except:
        return await msg.answer('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1‚Äì10')
    await state.update_data(mood=m)
    data = load_data()
    uid = str(msg.from_user.id)
    data.setdefault(uid, {}).setdefault('mood_history', []).append({'date': datetime.now().isoformat(), 'mood': m})
    save_data(data)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ —á–µ–∫-–∏–Ω –∑–∞–≤–µ—Ä—à–µ–Ω
    user_data = await state.get_data()
    msg_id = user_data.get('main_msg_id')
    if msg_id:
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è—è –æ—Ç–≤–µ—Ç –∏ –∫–Ω–æ–ø–∫–∏
        await msg.bot.edit_message_text(
            chat_id=msg.chat.id,
            message_id=msg_id,
            text=f'‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {m}/10\n–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞: (–º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏)',
            reply_markup=main_menu(msg.from_user.id in ADMIN_IDS)
        )
    else:
        await msg.answer(f'‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {m}/10', reply_markup=main_menu(msg.from_user.id in ADMIN_IDS))
    await state.clear()

@dp.message(F.text)
async def crisis_detection(msg: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    text = msg.text.lower()
    detected = [kw for kw in CRISIS_KEYWORDS if kw in text]
    if detected:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Å—É—Ä—Å—ã –ø–æ–º–æ—â–∏
        await msg.answer(
            "üö® –ó–∞–º–µ—á–µ–Ω—ã —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. "
            "–í–æ—Ç —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å:",
            reply_markup=crisis_kb
        )
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            await bot.send_message(
                admin_id,
                f"‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.id}:\n"
                f"–¢–µ–∫—Å—Ç: {msg.text}\n"
                f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∫–ª—é—á–∏: {', '.join(detected)}"
            )

@dp.message(DailyCheckin.concerns)
async def ai_concerns(msg: Message, state: FSMContext):
    data = await state.get_data()
    concern = msg.text if msg.text.lower() != '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' else '–ü—Ä–æ–ø—É—â–µ–Ω–æ'
    uid = str(msg.from_user.id)
    db = load_data()
    db.setdefault(uid, {})['last_checkin'] = datetime.now().isoformat()
    save_data(db)
    user_data = await state.get_data()
    msg_id = user_data.get('main_msg_id')
    if msg_id:
        await msg.bot.edit_message_text(
            chat_id=msg.chat.id,
            message_id=msg_id,
            text=f'‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data.get("mood")}/10\n–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞: {concern}',
            reply_markup=main_menu(msg.from_user.id in ADMIN_IDS)
        )
    else:
        await msg.answer(f'‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {user_data.get("mood")}/10\n–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞: {concern}', reply_markup=main_menu(msg.from_user.id in ADMIN_IDS))
    await state.clear()

@dp.callback_query(F.data == 'breath')
async def cb_breath(cq: types.CallbackQuery):
    await cq.message.edit_text(random.choice(BREATHING), reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'meditate')
async def cb_meditate(cq: types.CallbackQuery):
    await cq.message.edit_text(random.choice(MEDITATIONS), reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'affirm')
async def cb_affirm(cq: types.CallbackQuery):
    await cq.message.edit_text(random.choice(AFFIRMATIONS), reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'resources')
async def cb_resources(cq: types.CallbackQuery):
    text = '*–ú—É–∑—ã–∫–∞:*\n' + '\n'.join(RESOURCES['music']) + \
          '\n\n*–ü–æ–¥–∫–∞—Å—Ç—ã:*\n' + '\n'.join(RESOURCES['podcasts']) + \
          '\n\n*–ü—Ä–æ–º–ø—Ç—ã:*\n' + '\n'.join(RESOURCES['prompts'])
    await cq.message.edit_text(text, parse_mode='Markdown', reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'star')
async def cb_star(cq: types.CallbackQuery):
    await cq.message.edit_text(STAR, parse_mode='Markdown', reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'theories')
async def cb_theories(cq: types.CallbackQuery):
    for name, desc in ETHICS.items():
        await cq.message.edit_text(f'*{name}* ‚Äî {desc}', parse_mode='Markdown', reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))

@dp.callback_query(F.data == 'values')
async def cb_values(cq: types.CallbackQuery, state: FSMContext):
    await cq.message.edit_text('üß† –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π; –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å:')
    await state.set_state(ValuesTest.question)
    await state.update_data(idx=0, answers=[])

@dp.message(ValuesTest.question, F.text)
async def ai_values(msg: Message, state: FSMContext):
    data = await state.get_data()
    idx = data['idx']
    answers = data.get('answers', [])
    if idx > 0:
        answers.append(msg.text)
    if idx >= len(VALUES_Q):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
        uid = str(msg.from_user.id)
        db = load_data()
        db.setdefault(uid, {})['values_answers'] = answers
        save_data(db)
        await msg.answer('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.', reply_markup=main_menu(msg.from_user.id in ADMIN_IDS))
        await state.clear()
        return
    await msg.answer(VALUES_Q[idx])
    await state.update_data(idx=idx + 1, answers=answers)

@dp.callback_query(F.data == 'admin')
async def cb_admin(cq: types.CallbackQuery):
    if cq.from_user.id not in ADMIN_IDS:
        return await cq.answer("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω", show_alert=True)
    
    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', callback_data='users_list')],
        [InlineKeyboardButton(text='üì¢ –†–∞—Å—Å—ã–ª–∫–∞', callback_data='start_broadcast')],
        [InlineKeyboardButton(text='üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö', callback_data='start_cleanup')],
        [InlineKeyboardButton(text='üîô –ù–∞–∑–∞–¥', callback_data='back')]
    ])
    
    await cq.message.edit_text(
        "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:*\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=kb
    )

@dp.callback_query(F.data == 'users_list')
async def users_list(cq: types.CallbackQuery):
    if cq.from_user.id not in ADMIN_IDS:
        return
    
    data = load_data()
    text = f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(data)}\n\n" + "\n".join(
        f"‚ñ´Ô∏è ID: {uid}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω–∏–π —á–µ–∫-–∏–Ω: {user.get('last_checkin', '–Ω–∏–∫–æ–≥–¥–∞')}\n"
        for uid, user in data.items()
    )
    await cq.message.edit_text(text[:4000] + "\n...")  # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ

@dp.callback_query(F.data == 'start_broadcast')
async def start_broadcast(cq: types.CallbackQuery, state: FSMContext):
    if cq.from_user.id not in ADMIN_IDS:
        return
    
    await cq.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(Broadcast.message)
    await cq.answer()

@dp.message(Broadcast.message)
async def process_broadcast(msg: Message, state: FSMContext):
    data = load_data()
    total = len(data)
    success = 0
    
    for uid in data:
        try:
            await bot.send_message(uid, msg.text)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {uid}: {str(e)}")
    
    await msg.answer(
        f"üì§ –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:\n"
        f"‚Ä¢ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚Ä¢ –ù–µ —É–¥–∞–ª–æ—Å—å: {total - success}"
    )
    await state.clear()

@dp.callback_query(F.data == 'start_cleanup')
async def start_cleanup(cq: types.CallbackQuery, state: FSMContext):
    if cq.from_user.id not in ADMIN_IDS:
        return
    
    await cq.message.answer("üîé –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏:")
    await state.set_state(Cleanup.user_id)
    await cq.answer()

@dp.message(Cleanup.user_id)
async def process_cleanup(msg: Message, state: FSMContext):
    uid = msg.text.strip()
    data = load_data()
    
    if uid in data:
        del data[uid]
        save_data(data)
        await msg.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} —É–¥–∞–ª–µ–Ω—ã")
    else:
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    await state.clear()

async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())