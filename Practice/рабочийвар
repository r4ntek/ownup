import asyncio
import json
import os
import random
from datetime import datetime
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from config import TOKEN

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = Bot(token=TOKEN)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ —Ñ–∞–π–ª–∞ config.py
dp = Dispatcher()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π

# --- –§–ê–ô–õ –î–õ–Ø –•–†–ê–ù–ï–ù–ò–Ø –î–ê–ù–ù–´–• –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ---
DATA_FILE = 'storage.json'

# --- FSM –°–û–°–¢–û–Ø–ù–ò–Ø ---
class Onboarding(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    goal = State()  # –¶–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º
    reminder_frequency = State()  # –ß–∞—Å—Ç–æ—Ç–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ —á–µ–∫-–∏–Ω–∞—Ö

class DailyCheckin(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞."""
    mood = State()  # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    concerns = State()  # –ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def load_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ storage.json.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥—ë–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å.
    """
    if not os.path.exists(DATA_FILE):
        return {}
    try:
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            content = f.read()
            if not content.strip():
                return {}
            return json.loads(content)
    except (json.JSONDecodeError, FileNotFoundError):
        print("‚ö†Ô∏è –§–∞–π–ª storage.json –ø–æ–≤—Ä–µ–∂–¥—ë–Ω. –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π.")
        return {}

def save_data(data):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª storage.json.
    """
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, indent=4, ensure_ascii=False)

def get_user_data(user_id: int):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ ID.
    –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å.
    """
    data = load_data()
    user_id_str = str(user_id)
    if user_id_str not in data:
        data[user_id_str] = {
            "goal": None,
            "reminder_frequency": None,
            "last_checkin": None,
            "mood_history": [],
            "values_answers": []
        }
        save_data(data)
    return data[user_id_str]

def update_user_data(user_id: int, key: str, value: any):
    """
    –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∫–ª—é—á—É.
    """
    data = load_data()
    user_id_str = str(user_id)
    if user_id_str not in data:
        data[user_id_str] = {
            "mood_history": [],
            "values_answers": []
        }
    data[user_id_str][key] = value
    save_data(data)

def append_mood(user_id: int, mood: int):
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–ø–∏—Å—å –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é.
    """
    data = load_data()
    user_id_str = str(user_id)
    if user_id_str not in data:
        data[user_id_str] = {"mood_history": []}
    elif "mood_history" not in data[user_id_str]:
        data[user_id_str]["mood_history"] = []
    data[user_id_str]["mood_history"].append({
        "date": str(datetime.now()),
        "mood": mood
    })
    save_data(data)

# --- –ö–õ–ê–í–ò–ê–¢–£–†–´ ---
def get_main_kb():
    """
    –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ù§Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")],
            [KeyboardButton(text="‚öñÔ∏è –≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")],
            [KeyboardButton(text="üß† –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è")],
        ],
        resize_keyboard=True
    )

def get_reminder_kb():
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ")],
            [KeyboardButton(text="üìÖ –†–∞–∑ –≤ 3 –¥–Ω—è")],
            [KeyboardButton(text="üóìÔ∏è –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é")],
        ],
        resize_keyboard=True
    )

# --- –ö–û–ù–¢–ï–ù–¢ ---
BREATHING_EXERCISES = [
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ 4-7-8 –¥—ã—Ö–∞–Ω–∏–µ:\n"
    "1. –í–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ –Ω–æ—Å –Ω–∞ 4 —Å–µ–∫—É–Ω–¥—ã.\n"
    "2. –ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ 7 —Å–µ–∫—É–Ω–¥.\n"
    "3. –ú–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ —á–µ—Ä–µ–∑ —Ä–æ—Ç –Ω–∞ 8 —Å–µ–∫—É–Ω–¥.\n"
    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ 5 —Ä–∞–∑.",
    "–ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ:\n"
    "1. –í–¥–æ—Ö ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
    "2. –ó–∞–¥–µ—Ä–∂–∫–∞ ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
    "3. –í—ã–¥–æ—Ö ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
    "4. –ü–∞—É–∑–∞ ‚Äî 4 —Å–µ–∫—É–Ω–¥—ã\n"
    "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ —Ü–∏–∫–ª 4 —Ä–∞–∑–∞."
]

MEDITATIONS = [
    "–ö–æ—Ä–æ—Ç–∫–∞—è 3-–º–∏–Ω—É—Ç–Ω–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:\n"
    "–°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ, –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–≤–æ—ë–º –¥—ã—Ö–∞–Ω–∏–∏. "
    "–ï—Å–ª–∏ –º—ã—Å–ª–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—á–∞–π—Ç–µ –∏—Ö –∏ –≤–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –¥—ã—Ö–∞–Ω–∏—é.",
    "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏:\n"
    "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Ç—Ä–∏ –≤–µ—â–∏, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Å–µ–≥–æ–¥–Ω—è –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã. "
    "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–∂–¥–æ–π –ø–æ –º–∏–Ω—É—Ç–µ, –ø–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ —Ç—ë–ø–ª—ã–µ —ç–º–æ—Ü–∏–∏."
]

AFFIRMATIONS = [
    "–Ø –¥–æ—Å—Ç–æ–∏–Ω –ª—é–±–≤–∏ –∏ –∑–∞–±–æ—Ç—ã.",
    "–°–µ–≥–æ–¥–Ω—è —è –¥–µ–ª–∞—é –º–∞–ª–µ–Ω—å–∫–∏–π —à–∞–≥ –∫ —Å–≤–æ–µ–º—É –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏—é.",
    "–Ø —Å–ø–æ–∫–æ–µ–Ω. –Ø –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É—é —Å–≤–æ–∏ –º—ã—Å–ª–∏.",
    "–Ø –∏–º–µ—é –ø—Ä–∞–≤–æ –Ω–∞ –æ—Ç–¥—ã—Ö –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏–ª."
]

RESOURCES = {
    "–º—É–∑—ã–∫–∞": ["https://music.yandex.ru/album/123456 ", "https://open.spotify.com/playlist/12345 "],
    "–ø–æ–¥–∫–∞—Å—Ç—ã": ["https://podcasts.apple.com/podcast/id123456 ", "https://vk.com/audio_playlist/-1_987654321 "],
    "–ø—Ä–æ–º–ø—Ç—ã": [
        "–û–ø–∏—à–∏—Ç–µ —Ç—Ä–∏ —Ö–æ—Ä–æ—à–∏–µ –≤–µ—â–∏, —Å–ª—É—á–∏–≤—à–∏–µ—Å—è —Å–µ–≥–æ–¥–Ω—è.",
        "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–µ–±–µ –∏–ª–∏ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏?",
        "–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã —Ü–µ–Ω–∏—Ç–µ –≤ —Å–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ?"
    ]
}

ETHICAL_THEORIES = {
    "–£—Ç–∏–ª–∏—Ç–∞—Ä–∏–∑–º": (
        "üîπ *–°—É—Ç—å*: –¥–µ–π—Å—Ç–≤–∏–µ —Å—á–∏—Ç–∞–µ—Ç—Å—è –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –±–ª–∞–≥–æ –Ω–∞–∏–±–æ–ª—å—à–µ–º—É —á–∏—Å–ª—É.\n"
        "üîπ *–ü—Ä–∏–º–µ—Ä*: –í—ã —Ä–µ—à–∞–µ—Ç–µ –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å —á–∞—Å—Ç—å –∑–∞—Ä–ø–ª–∞—Ç—ã –≤ —Ñ–æ–Ω–¥ –ø–æ–º–æ—â–∏ –¥–µ—Ç—è–º ‚Äî –¥–∞–∂–µ –µ—Å–ª–∏ —ç—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Ç –≤–∞—Å –∂–µ—Ä—Ç–≤."
    ),
    "–î–µ–æ–Ω—Ç–æ–ª–æ–≥–∏—è": (
        "üîπ *–°—É—Ç—å*: –¥–µ–π—Å—Ç–≤–∏—è –æ—Ü–µ–Ω–∏–≤–∞—é—Ç—Å—è –ø–æ –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—é –º–æ—Ä–∞–ª—å–Ω—ã–º –ø—Ä–∞–≤–∏–ª–∞–º –∏–ª–∏ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç—è–º.\n"
        "üîπ *–ü—Ä–∏–º–µ—Ä*: –í—ã –Ω–µ –ª–∂—ë—Ç–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∞–≤–¥–∞ –º–æ–∂–µ—Ç –∫–æ–º—É-—Ç–æ –Ω–∞–≤—Ä–µ–¥–∏—Ç—å."
    ),
    "–≠—Ç–∏–∫–∞ –¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª–µ–π": (
        "üîπ *–°—É—Ç—å*: –∞–∫—Ü–µ–Ω—Ç –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ö–æ—Ä–æ—à–∏—Ö –∫–∞—á–µ—Å—Ç–≤ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–¥–æ–±—Ä–æ–¥–µ—Ç–µ–ª–µ–π), –∞ –Ω–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏—è—Ö.\n"
        "üîπ *–ü—Ä–∏–º–µ—Ä*: –í—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —Ç–µ—Ä–ø–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –±—ã—Ç—å —á–µ–ª–æ–≤–µ–∫–æ–º, —Å–ø–æ—Å–æ–±–Ω—ã–º –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏."
    )
}

VALUES_QUESTIONS = [
    "–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã —Ü–µ–Ω–∏—Ç–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –≤ –ª—é–¥—è—Ö?",
    "–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ –∏–∑ –≤–∞—à–µ–π –∂–∏–∑–Ω–∏ –¥–∞–ª–æ –≤–∞–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —á—É–≤—Å—Ç–≤–æ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è?",
    "–ö–∞–∫–æ–π –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –≤–∏–¥–µ—Ç—å —Å–≤–æ—é –∂–∏–∑–Ω—å —á–µ—Ä–µ–∑ 5 –ª–µ—Ç?"
]

STAR_GUIDE = (
    "üß© <b>–ú–µ—Ç–æ–¥ S.T.A.R.</b> ‚Äî –ø–æ–º–æ–∂–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –º—ã—Å–ª–∏ –ø–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º —Å–ª–æ–∂–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è:\n"
    "<b>S</b>ituation (–°–∏—Ç—É–∞—Ü–∏—è): –æ–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é.\n"
    "<b>T</b>ask (–ó–∞–¥–∞—á–∞): –∫–∞–∫—É—é –∑–∞–¥–∞—á—É –≤—ã —Ä–µ—à–∞–µ—Ç–µ?\n"
    "<b>A</b>ction (–î–µ–π—Å—Ç–≤–∏–µ): –∫–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã?\n"
    "<b>R</b>esult (–†–µ–∑—É–ª—å—Ç–∞—Ç): –∫–∞–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è —É –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞?\n"
    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–µ—Ç–æ–¥ –∫ —Å–≤–æ–µ–π —Å–∏—Ç—É–∞—Ü–∏–∏!"
)

# --- –•–ï–ù–î–õ–ï–†–´ ---
@dp.message(CommandStart())
async def cmd_start(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ü–µ–ª—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
    """
    user_id = message.from_user.id
    get_user_data(user_id)
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç!</b>\n\n"
        "–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Å:\n"
        "- –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π üíñ\n"
        "- –û–±—Å—É–∂–¥–µ–Ω–∏–µ–º —ç—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∏–ª–µ–º–º ‚öñÔ∏è\n"
        "- –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–µ–π üß†\n\n"
        "<i>–° —á–µ–≥–æ –Ω–∞—á–Ω—ë–º?</i>",
        parse_mode="HTML"
    )
    await asyncio.sleep(1)
    await message.answer("üéØ –ö–∞–∫–∞—è —Ü–µ–ª—å —É –≤–∞—à–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π?", reply_markup=get_main_kb())
    await state.set_state(Onboarding.goal)

@dp.message(Onboarding.goal)
async def set_goal(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
    """
    valid_goals = ["‚ù§Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", "‚öñÔ∏è –≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã", "üß† –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è"]
    if message.text not in valid_goals:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(goal=message.text)
    await message.answer("‚è∞ –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á–µ–∫-–∏–Ω–∞—Ö?", reply_markup=get_reminder_kb())
    await state.set_state(Onboarding.reminder_frequency)

@dp.message(Onboarding.reminder_frequency)
async def set_reminder_frequency(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.
    """
    valid_frequencies = ["üåÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ", "üìÖ –†–∞–∑ –≤ 3 –¥–Ω—è", "üóìÔ∏è –†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é"]
    if message.text not in valid_frequencies:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    await state.update_data(reminder_frequency=message.text)
    data = await state.get_data()
    user_id = message.from_user.id
    update_user_data(user_id, "goal", data["goal"])
    update_user_data(user_id, "reminder_frequency", data["reminder_frequency"])
    await message.answer(
        f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n\n"
        f"<b>–¶–µ–ª—å:</b> {data['goal']}\n"
        f"<b>–ß–∞—Å—Ç–æ—Ç–∞:</b> {data['reminder_frequency']}\n\n"
        "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–Ω–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π —á–∞—Å—Ç–æ—Ç–µ.",
        parse_mode="HTML",
        reply_markup=None
    )
    await asyncio.sleep(1)
    await start_daily_checkin_prompt(message, state)

async def start_daily_checkin_prompt(message: Message, state: FSMContext):
    """
    –ù–∞—á–∞–ª–æ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞.
    """
    await message.answer(
        "üìÖ <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π —á–µ–∫-–∏–Ω</b>\n\n"
        "–ö–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 10?",
        parse_mode="HTML"
    )
    await state.set_state(DailyCheckin.mood)

@dp.message(DailyCheckin.mood)
async def ask_concerns(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        mood = int(message.text)
        if not 1 <= mood <= 10:
            raise ValueError
    except ValueError:
        await message.answer("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.")
        return
    await state.update_data(mood=mood)
    append_mood(message.from_user.id, mood)
    await message.answer(
        "üí≠ –ß—Ç–æ —Å–µ–≥–æ–¥–Ω—è –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –∏–ª–∏ —Ç—Ä–µ–≤–æ–∂–∏—Ç? –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–æ–ø—Ä–æ—Å.",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
            resize_keyboard=True
        )
    )
    await state.set_state(DailyCheckin.concerns)

@dp.message(DailyCheckin.concerns)
async def finish_checkin(message: Message, state: FSMContext):
    """
    –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ —á–µ–∫-–∏–Ω–∞.
    """
    data = await state.get_data()
    concerns = message.text if message.text != "‚û°Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else "üö´ –ü—Ä–æ–ø—É—â–µ–Ω–æ"
    user_id = message.from_user.id
    update_user_data(user_id, "last_checkin", str(datetime.now()))
    await message.answer(
        "‚úîÔ∏è –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã!\n\n"
        f"üìä –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data['mood']} / 10\n"
        f"üí≠ –ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞: {concerns}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –¥–∞–ª—å—à–µ:",
        reply_markup=get_main_kb()
    )
    await state.clear()

# --- –•–ï–ù–î–õ–ï–†–´ –≠–ú–û–¶–ò–û–ù–ê–õ–¨–ù–û–ô –ü–û–î–î–ï–†–ñ–ö–ò ---
@dp.message(F.text == "‚ù§Ô∏è –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞")
async def emotional_support(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏")],
            [KeyboardButton(text="üßò‚Äç‚ôÄÔ∏è –ö–æ—Ä–æ—Ç–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è")],
            [KeyboardButton(text="‚ú® –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏")],
            [KeyboardButton(text="üìö –†–µ—Å—É—Ä—Å—ã")],
            [KeyboardButton(text="üìä –ú–æ–∏ —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "üõ†Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª <b>–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞–º —Å–µ–π—á–∞—Å –Ω—É–∂–Ω–æ:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.message(F.text == "üå¨Ô∏è –î—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏")
async def breathing_exercises(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—É—é —Ç–µ—Ö–Ω–∏–∫—É.
    """
    exercise = random.choice(BREATHING_EXERCISES)
    await message.answer(f"üå¨Ô∏è –í–æ—Ç –≤–∞—à–∞ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞:\n<code>{exercise}</code>", parse_mode="HTML")

@dp.message(F.text == "üßò‚Äç‚ôÄÔ∏è –ö–æ—Ä–æ—Ç–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è")
async def meditations(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é.
    """
    meditation = random.choice(MEDITATIONS)
    await message.answer(f"üßò‚Äç‚ôÄÔ∏è –í–∞—à–∞ –∫–æ—Ä–æ—Ç–∫–∞—è –º–µ–¥–∏—Ç–∞—Ü–∏—è:\n<blockquote>{meditation}</blockquote>", parse_mode="HTML")

@dp.message(F.text == "‚ú® –ê—Ñ—Ñ–∏—Ä–º–∞—Ü–∏–∏")
async def affirmations(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∞—Ñ—Ñ–∏—Ä–º–∞—Ü–∏—é.
    """
    affirmation = random.choice(AFFIRMATIONS)
    await message.answer(f"‚ú® –°–µ–≥–æ–¥–Ω—è –¥–ª—è –≤–∞—Å:\n\"{affirmation}\"")

@dp.message(F.text == "üìö –†–µ—Å—É—Ä—Å—ã")
async def resources(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞.
    """
    await message.answer("üìö –í–æ—Ç –ø–æ–ª–µ–∑–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã –¥–ª—è –≤–∞—à–µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –º–∏—Ä–∞:")
    await message.answer("<b>–ü–æ–¥–±–æ—Ä–∫–∞ –º—É–∑—ã–∫–∏:</b>")
    for link in RESOURCES["–º—É–∑—ã–∫–∞"]:
        await message.answer(link)
    await message.answer("<b>–ü–æ–¥–∫–∞—Å—Ç—ã –æ –º–µ–Ω—Ç–∞–ª—å–Ω–æ–º –∑–¥–æ—Ä–æ–≤—å–µ:</b>")
    for link in RESOURCES["–ø–æ–¥–∫–∞—Å—Ç—ã"]:
        await message.answer(link)
    await message.answer("<b>–ü—Ä–æ–º–ø—Ç—ã –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞:</b>\n" + "\n".join([f"- {p}" for p in RESOURCES["–ø—Ä–æ–º–ø—Ç—ã"]]))

@dp.message(F.text == "üìä –ú–æ–∏ —Ç—Ä–µ–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è")
async def mood_trend(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≥—Ä–∞—Ñ–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π.
    """
    user_id = message.from_user.id
    data = load_data()
    user_data = data.get(str(user_id), {})
    history = user_data.get("mood_history", [])
    if not history:
        await message.answer("üìä –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏. –ü—Ä–æ–π–¥–∏—Ç–µ —á–µ–∫-–∏–Ω –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑, —á—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫.")
        return
    last_week = [h for h in history if (datetime.now() - datetime.fromisoformat(h['date'])).days <= 7]
    avg_mood = sum(h['mood'] for h in last_week) / len(last_week)
    await message.answer(
        f"üìà –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π –≤–∞—à–µ —Å—Ä–µ–¥–Ω–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: <b>{avg_mood:.1f} / 10</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –∑–∞–ø–æ–ª–Ω—è—Ç—å –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ /checkin.",
        parse_mode="HTML"
    )

# --- –•–ï–ù–î–õ–ï–†–´ –≠–¢–ò–ß–ï–°–ö–ò–• –í–û–ü–†–û–°–û–í ---
@dp.message(F.text == "‚öñÔ∏è –≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
async def ethical_questions(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞–∑–¥–µ–ª–∞ —ç—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.
    """
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üß© –ê–Ω–∞–ª–∏–∑ –¥–∏–ª–µ–º–º—ã")],
            [KeyboardButton(text="üí° –ú–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")],
            [KeyboardButton(text="üìò –í–≤–µ–¥–µ–Ω–∏–µ –≤ —ç—Ç–∏–∫—É")],
            [KeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "‚öñÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–∞–∑–¥–µ–ª <b>–≠—Ç–∏—á–µ—Å–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤</b>.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:",
        reply_markup=kb,
        parse_mode="HTML"
    )

@dp.message(F.text == "üß© –ê–Ω–∞–ª–∏–∑ –¥–∏–ª–µ–º–º—ã")
async def star_analysis(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–µ—Ç–æ–¥ STAR –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∏–ª–µ–º–º.
    """
    await message.answer(STAR_GUIDE, parse_mode="HTML")

@dp.message(F.text == "üìò –í–≤–µ–¥–µ–Ω–∏–µ –≤ —ç—Ç–∏–∫—É")
async def intro_to_ethics(message: Message):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —ç—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ–æ—Ä–∏—è—Ö.
    """
    for title, text in ETHICAL_THEORIES.items():
        await message.answer(text, parse_mode="HTML")

@dp.message(F.text == "üí° –ú–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏")
async def values_questions(message: Message, state: FSMContext):
    """
    –ù–∞—á–∏–Ω–∞–µ—Ç —Ç–µ—Å—Ç –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.
    """
    await message.answer("üß† –°–µ–π—á–∞—Å –≤—ã –ø—Ä–æ–π–¥—ë—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å —Å–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏.")
    await asyncio.sleep(1)
    await ask_value_question(message, state, index=0)

async def ask_value_question(message: Message, state: FSMContext, index: int):
    """
    –ó–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å –∏–∑ —Ç–µ—Å—Ç–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π.
    """
    if index >= len(VALUES_QUESTIONS):
        await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç—ã! –ü–æ–¥—É–º–∞–π—Ç–µ, –∫–∞–∫–∏–µ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞–∂–Ω—ã –∏–º–µ–Ω–Ω–æ –≤–∞–º.")
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á–µ–º –∑–∞–Ω—è—Ç—å—Å—è –¥–∞–ª—å—à–µ:", reply_markup=get_main_kb())
        return
    question = VALUES_QUESTIONS[index]
    await message.answer(f"‚ùì {question}")
    await state.update_data(values_index=index)
    await state.set_state(Onboarding.goal)

@dp.message(F.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_menu(message: Message, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await message.answer("üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_main_kb())

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
async def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.
    """
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())