import asyncio
import json
import os
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import F
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∑–∞–¥–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é
from config import TOKEN

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# ID –∞–¥–º–∏–Ω–æ–≤
ADMIN_IDS = [5247307710]

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = 'storage.json'

# --- –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π ---
VALUES_QUESTIONS = [
    "–í–æ–ø—Ä–æ—Å 1: –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ ‚Äî —Å–µ–º—å—è –∏–ª–∏ –∫–∞—Ä—å–µ—Ä–∞?",
    "–í–æ–ø—Ä–æ—Å 2: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è?",
    "–í–æ–ø—Ä–æ—Å 3: –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ ‚Äî —á–µ—Å—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ —É—Å–ø–µ—Ö?",
    "–í–æ–ø—Ä–æ—Å 4: –ß—Ç–æ –≤–∞–∂–Ω–µ–µ ‚Äî –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω—ã–π –∫–æ–º—Ñ–æ—Ä—Ç –∏–ª–∏ –¥—É—Ö–æ–≤–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ?",
    "–í–æ–ø—Ä–æ—Å 5: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã —Ä–∞–±–æ—Ç—É –≤ –∫–æ–º–∞–Ω–¥–µ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å?",
    "–í–æ–ø—Ä–æ—Å 6: –í–∞–∂–Ω–∞ –ª–∏ –¥–ª—è –≤–∞—Å –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω?",
    "–í–æ–ø—Ä–æ—Å 7: –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∏—Å–∫?",
    "–í–æ–ø—Ä–æ—Å 8: –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç–µ –ª–∏ –≤—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –∏–º–ø—Ä–æ–≤–∏–∑–∏—Ä–æ–≤–∞—Ç—å?",
    "–í–æ–ø—Ä–æ—Å 9: –ß—Ç–æ –¥–ª—è –≤–∞—Å –≤–∞–∂–Ω–µ–µ ‚Äî –ø—Ä–∏–∑–Ω–∞–Ω–∏–µ –∏–ª–∏ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏–µ?",
    "–í–æ–ø—Ä–æ—Å 10: –í–∞–∂–Ω–µ–µ –ª–∏ –¥–ª—è –≤–∞—Å –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –∏–ª–∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ?"
]

# –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
CRISIS_KEYWORDS = ['—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ', '–ø–æ–º–æ–≥–∏—Ç–µ', '–∫—Ä–∏–∑–∏—Å', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Å—É–∏—Ü–∏–¥', '—Å—Ç—Ä–∞—Ö', '–±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ']

# –†–µ—Å—É—Ä—Å—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
CRISIS_RESOURCES = {
    "–ø—Ä—è–º–∞—è –ø–æ–º–æ—â—å": ["–¢–µ–ª–µ—Ñ–æ–Ω –¥–æ–≤–µ—Ä–∏—è: 8-800-2000-122", "https://example.com/help"],
    "–ø—Å–∏—Ö–æ–ª–æ–≥": ["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è —Å–ª—É–∂–±–∞: 8-495-123-45-67"],
    "—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã": ["911 (—ç–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞)"]
}

# --- –°—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM ---
class DailyCheckin(StatesGroup):
    mood = State()
    concerns = State()

class ValuesTest(StatesGroup):
    question = State()
    answers = State()
    index = State()

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–º –¥–∞–Ω–Ω—ã—Ö ---
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

def ensure_user(user_id):
    data = load_data()
    if str(user_id) not in data:
        data[str(user_id)] = {}
        save_data(data)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def main_menu(is_admin=False):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚ù§Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞', callback_data='support')],
            [InlineKeyboardButton(text='‚öñÔ∏è –≠—Ç–∏–∫–∞', callback_data='ethics')],
            [InlineKeyboardButton(text='üß† –°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è', callback_data='reflect')],
            [InlineKeyboardButton(text='‚ö†Ô∏è –≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è', callback_data='emergency')],
            [InlineKeyboardButton(text='üìä –¢—Ä–µ–Ω–¥—ã', callback_data='trends')],
            [InlineKeyboardButton(text='üìù –ß–µ–∫-–∏–Ω', callback_data='checkin')],
            [InlineKeyboardButton(text='–¢–µ—Å—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π', callback_data='values')]
        ],
        row_width=2
    )

support_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É', url='https://example.com/contact')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ]
)

ethics_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–û–±—Å—É–¥–∏—Ç—å —ç—Ç–∏–∫—É', url='https://example.com/ethics')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ]
)

crisis_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ü—Ä—è–º–∞—è –ø–æ–º–æ—â—å', callback_data='cr_–ø—Ä—è–º–∞—è –ø–æ–º–æ—â—å')],
        [InlineKeyboardButton(text='–ü—Å–∏—Ö–æ–ª–æ–≥', callback_data='cr_–ø—Å–∏—Ö–æ–ª–æ–≥')],
        [InlineKeyboardButton(text='–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å', callback_data='cr_—ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–µ —Å–ª—É–∂–±—ã')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')]
    ]
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start ---
@dp.message(CommandStart())
async def handle_start(message: Message, state: FSMContext):
    ensure_user(message.from_user.id)
    is_admin = message.from_user.id in ADMIN_IDS
    text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!*\n\n"
        "–Ø ‚Äî –≤–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —á–µ–∫-–∏–Ω–æ–≤, —Ç–µ—Å—Ç–æ–≤ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n\n"
        "–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ /menu –¥–ª—è –Ω–∞—á–∞–ª–∞."
    )
    msg = await message.answer(text, parse_mode='Markdown', reply_markup=main_menu(is_admin))
    await state.set_data({'main_message_id': msg.message_id})

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu ---
@dp.message(Command(commands=['menu']))
async def cmd_menu(message: Message, state: FSMContext):
    is_admin = message.from_user.id in ADMIN_IDS
    msg = await message.answer('üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_menu(is_admin))
    await state.set_data({'main_message_id': msg.message_id})

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ –¥–ª—è –∫–Ω–æ–ø–æ–∫ ---
@dp.callback_query(F.data == 'back')
async def handle_back(cq: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    main_msg_id = data.get('main_message_id')
    is_admin = cq.from_user.id in ADMIN_IDS
    if main_msg_id:
        await cq.message.edit_text('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown', reply_markup=main_menu(is_admin))
    else:
        msg = await cq.message.answer('üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*', parse_mode='Markdown', reply_markup=main_menu(is_admin))
        await state.set_data({'main_message_id': msg.message_id})
    await cq.answer()

@dp.callback_query(F.data == 'support')
async def support_callback(cq: types.CallbackQuery):
    await cq.message.edit_text('üõ†Ô∏è *–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞:*', parse_mode='Markdown', reply_markup=support_kb)
    await cq.answer()

@dp.callback_query(F.data == 'ethics')
async def ethics_callback(cq: types.CallbackQuery):
    await cq.message.edit_text('‚öñÔ∏è *–≠—Ç–∏—á–µ—Å–∫–∏–µ –≤–æ–ø—Ä–æ—Å—ã:*', parse_mode='Markdown', reply_markup=ethics_kb)
    await cq.answer()

@dp.callback_query(F.data == 'reflect')
async def reflect_callback(cq: types.CallbackQuery, state: FSMContext):
    await cq.message.edit_text('üß† *–°–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—è*\n–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìù –ß–µ–∫-–∏–Ω" –¥–ª—è –Ω–∞—á–∞–ª–∞.', reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))
    await cq.answer()

@dp.callback_query(F.data == 'trends')
async def trends_callback(cq: types.CallbackQuery):
    user_id = str(cq.from_user.id)
    data = load_data()
    user_data = data.get(user_id, {})
    history = user_data.get('mood_history', [])
    if not history:
        text = 'üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: 0/10'
    else:
        last7 = history[-7:]
        avg_mood = sum(int(h["mood"]) for h in last7) / len(last7)
        text = f'üìà –°—Ä–µ–¥–Ω–µ–µ –∑–∞ 7 –¥–Ω–µ–π: {avg_mood:.1f}/10'
    await cq.message.edit_text(text, reply_markup=main_menu(cq.from_user.id in ADMIN_IDS))
    await cq.answer()

@dp.callback_query(F.data == 'emergency')
async def emergency_callback(cq: types.CallbackQuery):
    await cq.message.edit_text('‚ö†Ô∏è *–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –ø–æ–º–æ—â—å*\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ—Å—É—Ä—Å:', parse_mode='Markdown', reply_markup=crisis_kb)
    await cq.answer()

@dp.callback_query(F.data.startswith('cr_'))
async def crisis_resource_callback(cq: types.CallbackQuery):
    key = cq.data.split('_', 1)[1]
    resources = CRISIS_RESOURCES.get(key, [])
    text = f'*{key.title().replace("_", " ")}:*\n' + '\n'.join(f'- {item}' for item in resources)
    await cq.message.edit_text(text, parse_mode='Markdown', reply_markup=crisis_kb)
    await cq.answer()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ß–µ–∫-–∏–Ω" ---
@dp.callback_query(F.data == 'checkin')
async def start_checkin(cq: types.CallbackQuery, state: FSMContext):
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
    await cq.message.delete()
    question = VALUES_QUESTIONS[0]
    msg = await cq.message.answer(question)
    await state.set_data({'question_index': 0, 'answers': []})
    await state.set_state(ValuesTest.question)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ ---
@dp.message(ValuesTest.question)
async def handle_value_question(msg: Message, state: FSMContext):
    data = await state.get_data()
    index = data.get('question_index', 0)
    answers = data.get('answers', [])
    answer_text = msg.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    answers.append({'question': VALUES_QUESTIONS[index], 'answer': answer_text})

    index += 1
    if index >= len(VALUES_QUESTIONS):
        # –ó–∞–≤–µ—Ä—à–∏–ª–∏ —Ç–µ—Å—Ç
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = str(msg.from_user.id)
        data_full = load_data()
        if user_id not in data_full:
            data_full[user_id] = {}
        data_full[user_id]['values_answers'] = answers
        save_data(data_full)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        message_text = '‚úÖ –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π:\n'
        for q, ans in zip(VALUES_QUESTIONS, answers):
            message_text += f"\n*{q}*\n–û—Ç–≤–µ—Ç: {ans['answer']}\n"
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        main_msg_id = (await state.get_data()).get('main_message_id')
        if main_msg_id:
            await bot.edit_message_text(chat_id=msg.chat.id, message_id=main_msg_id, text=message_text, parse_mode='Markdown')
        else:
            await msg.answer(message_text, parse_mode='Markdown')
        await state.clear()
        # –í–µ—Ä–Ω–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        is_admin = msg.from_user.id in ADMIN_IDS
        await bot.send_message(msg.chat.id, 'üìù –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω.', reply_markup=main_menu(is_admin))
        return

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    next_question = VALUES_QUESTIONS[index]
    await state.update_data({'question_index': index, 'answers': answers})
    await msg.answer(next_question)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ "–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ" –ø–æ—Å–ª–µ —á–µ–∫-–∏–Ω ---
@dp.message(DailyCheckin.concerns)
async def handle_concerns(msg: Message, state: FSMContext):
    concern = msg.text.strip()
    if concern.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        concern = '–ü—Ä–æ–ø—É—â–µ–Ω–æ'
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(msg.from_user.id)
    data = load_data()
    if user_id not in data:
        data[user_id] = {}
    data[user_id]['last_checkin'] = datetime.now().isoformat()
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    data[user_id]['concern'] = concern
    save_data(data)

    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    main_msg_id = (await state.get_data()).get('main_message_id')
    # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ, –∏–ª–∏ –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ—â–µ —Ä–∞–∑
    # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—à–µ–º –∏ –ø–æ–∫–∞–∂–µ–º
    # –í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ —á–µ–∫-–∏–Ω–∞
    # –ù–æ –≤ —Ç–µ–∫—É—â–µ–º –∫–æ–¥–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–æ–±–∏—Ä–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    # –î–ª—è –ø–æ–ª–Ω–æ—Ç—ã ‚Äî –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    # –ó–¥–µ—Å—å –æ—Å—Ç–∞–≤–∏–º —Ç–∞–∫

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.edit_message_text(
        chat_id=msg.chat.id,
        message_id=main_msg_id,
        text=f'‚úîÔ∏è –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {data.get(user_id, {}).get("mood", "–Ω–µ —É–∫–∞–∑–∞–Ω–æ")}/10\n–ë–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞: {concern}',
        reply_markup=main_menu(msg.from_user.id in ADMIN_IDS)
    )
    await state.clear()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ DailyCheckin.mood ---
@dp.message(DailyCheckin.mood)
async def handle_mood(msg: Message, state: FSMContext):
    try:
        mood_value = int(msg.text.strip())
        if not (1 <= mood_value <= 10):
            raise ValueError
    except:
        await msg.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10.')
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
    data = load_data()
    user_id = str(msg.from_user.id)
    if user_id not in data:
        data[user_id] = {}
    data[user_id]['mood'] = mood_value
    save_data(data)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ
    await msg.answer('–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–∞, –æ–ø–∏—à–∏—Ç–µ –∏—Ö, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å".')
    await DailyCheckin.concerns.set()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ FSM ---
@dp.message()
async def handle_general(msg: Message):
    text_lower = msg.text.lower()
    if any(word in text_lower for word in CRISIS_KEYWORDS):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —É–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        await msg.answer("üö® –ó–∞–º–µ—á–µ–Ω—ã —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞ –∫—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –í–æ—Ç —Ä–µ—Å—É—Ä—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ–º–æ—á—å:", reply_markup=crisis_kb)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
        for admin_id in ADMIN_IDS:
            await bot.send_message(admin_id, f"‚ö†Ô∏è –ö—Ä–∏–∑–∏—Å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {msg.from_user.id}:\n–¢–µ–∫—Å—Ç: {msg.text}")
        return
    # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞—Ç—å

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.")
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.run(main())